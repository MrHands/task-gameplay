@use 'sass:color';

@function get-shade($color, $lightness) {
	@return hsl(color.hue($color), color.saturation($color), $lightness);
}

.a-dice {
	$clr-300: hsl(55, 80%, 30%);
	$clr-500: hsl(55, 80%, 50%);
	$clr-800: hsl(55, 80%, 80%);

	--bg-color: transparent;

	position: relative;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	width: 4rem;
	aspect-ratio: 1 / 1;
	background: get-shade(gold, 80%);
	color: get-shade(gold, 30%);
	border: 0.2rem solid currentColor;
	border-radius: 25%;
	font-size: 2rem;
	font-weight: bold;
	transition-property: margin, transform;
	transition-duration: 0.5s;
	z-index: -1;

	&:before {
		$border: 0.2rem;

		content: '';
		position: absolute;
		left: 0;
		top: 0;
		width: calc(100% - #{2 * $border});
		height: calc(100% - #{2 * $border});
		margin: $border;
		background: var(--bg-color);
		border-radius: inherit;
		z-index: -1;
	}

	&[draggable="true"] {
		&:hover {
			margin: 0 1rem;
			transform: scale(1.5, 1.5);
			cursor: grab;
		}
	}

	&__title {
		font-size: 1.2rem;
	}

	&.-task {
		--bg-color: #{get-shade(gold, 100%)};

		color: get-shade(gold, 40%);
	}

	&.-empty {
		background: transparent;
		border-style: dashed;
	}

	&.-drop {
		background: transparent;
		width: 6rem;
		font-size: 3.5rem;
	}

	&.-minmax {
		--bg-color: #{get-shade(gold, 80%)};

		font-size: 2rem;
		color: get-shade(gold, 40%);

		&:before {
			$stripe-size: 6px;

			background: repeating-linear-gradient(
				135deg,
				var(--bg-color),
				var(--bg-color) #{$stripe-size},
				transparent #{$stripe-size},
				transparent #{$stripe-size * 2}
			);
		}
	}

	&.-active {
		--bg-color: #{get-shade(green, 80%)};

		background: transparent;
		color: green;
		border-style: solid;
	}

	&.-denied {
		--bg-color: #{get-shade(red, 80%)};

		background: transparent;
		color: red;
		border-style: solid;
	}

	[disabled] & {
		background: transparent;
		color: darkgray;
		border-style: solid;
		z-index: initial;

		&:before {
			background: transparent;
		}
	}
}